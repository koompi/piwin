#!/bin/bash

# Application version --------------------------------------------------------------
LOCAL_VERSION="0.0.1"
GET_VERSION=$(curl -s https://repo.koompi.org/piwin-bin | grep VERSION=)
SERVER_VERSION="${GET_VERSION[@]:9:5}"

# Application list -----------------------------------------------------------------
APP_LIST=(
    'ms-office-2010'
    'ms-office-2013'
)

# Color variables ------------------------------------------------------------------
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
NORMAL=$(tput sgr0)

# Working directories --------------------------------------------------------------
REPO_ADDR="https://repo.koompi.org"
WINE_NAME="wine-stable-4.0.2-1-x86_64.pkg.tar.xz"
DOWNLOAD_DIR=$HOME/Downloads
INSTALLATION_DIR=$HOME/.piwin

# Dependencies ---------------------------------------------------------------------

WINE_DEPS=( "desktop-file-utils"  
            "fontconfig"  
            "freetype2"  
            "gettext"  
            "glu"  
            "lcms2"  
            "libpcap"  
            "libsm"  
            "libxcursor"  
            "libxdamage"  
            "libxi"  
            "libxml2"  
            "libxrandr"  
            "lib32-fontconfig"  
            "lib32-freetype2"  
            "lib32-gcc-libs"  
            "lib32-gettext"  
            "lib32-glu"  
            "lib32-lcms2"  
            "lib32-libpcap"  
            "lib32-libsm"  
            "lib32-libxcursor"  
            "lib32-libxdamage"  
            "lib32-libxi"  
            "lib32-libxml2"  
            "lib32-libxrandr"
            "alsa-lib" 
            "alsa-plugins" 
            "cups" 
            "dosbox" 
            "giflib" 
            "gnutls" 
            "gsm" 
            "gst-plugins-base-libs" 
            "libgphoto2" 
            "libjpeg-turbo" 
            "libldap" 
            "libpng" 
            "libpulse" 
            "libxcomposite" 
            "libxinerama" 
            "libxslt" 
            "mpg123" 
            "ncurses" 
            "ocl-icd" 
            "openal" 
            "samba" 
            "sane" 
            "sdl2" 
            "v4l-utils" 
            "vkd3d" 
            "vulkan-icd-loader" 
            "lib32-alsa-lib" 
            "lib32-alsa-plugins" 
            "lib32-giflib" 
            "lib32-gnutls" 
            "lib32-gst-plugins-base-libs" 
            "lib32-libjpeg-turbo" 
            "lib32-libldap" 
            "lib32-libpng" 
            "lib32-libpulse" 
            "lib32-libxcomposite" 
            "lib32-libxinerama" 
            "lib32-libxslt" 
            "lib32-mpg123" 
            "lib32-ncurses" 
            "lib32-ocl-icd" 
            "lib32-openal" 
            "lib32-sdl2" 
            "lib32-v4l-utils" 
            "lib32-vkd3d" 
            "lib32-vulkan-icd-loader" 
            "wine-mono" 
            "wine_gecko" 
            "winetricks" );

MISSING_DEPS="";

# Functions -----------------------------------------------------------------------

semver_compare() {
    local version_a version_b pr_a pr_b
    # strip word "v" and extract first subset version (x.y.z from x.y.z-foo.n)
    version_a=$(echo "${1//v/}" | awk -F'-' '{print $1}')
    version_b=$(echo "${2//v/}" | awk -F'-' '{print $1}')
    
    if [ "$version_a" \= "$version_b" ]
    then
        # check for pre-release
        # extract pre-release (-foo.n from x.y.z-foo.n)
        pr_a=$(echo "$1" | awk -F'-' '{print $2}')
        pr_b=$(echo "$2" | awk -F'-' '{print $2}')
        
        ####
        # Return 0 when A is equal to B
        [ "$pr_a" \= "$pr_b" ] && echo 0 && return 0
        
        ####
        # Return 1
        
        # Case when A is not pre-release
        if [ -z "$pr_a" ]
        then
            echo 1 && return 0
        fi
        
        ####
        # Case when pre-release A exists and is greater than B's pre-release
        
        # extract numbers -rc.x --> x
        number_a=$(echo ${pr_a//[!0-9]/})
        number_b=$(echo ${pr_b//[!0-9]/})
        [ -z "${number_a}" ] && number_a=0
        [ -z "${number_b}" ] && number_b=0
        
        [ "$pr_a" \> "$pr_b" ] && [ -n "$pr_b" ] && [ "$number_a" -gt "$number_b" ] && echo 1 && return 0
        
        ####
        # Retrun -1 when A is lower than B
        echo -1 && return 0
    fi
    arr_version_a=(${version_a//./ })
    arr_version_b=(${version_b//./ })
    cursor=0
    # Iterate arrays from left to right and find the first difference
    while [ "$([ "${arr_version_a[$cursor]}" -eq "${arr_version_b[$cursor]}" ] && [ $cursor -lt ${#arr_version_a[@]} ] && echo true)" == true ]
    do
        cursor=$((cursor+1))
    done
    [ "${arr_version_a[$cursor]}" -gt "${arr_version_b[$cursor]}" ] && echo 1 || echo -1
}

check_deps() {
    MISSING_NUM=0
    FOUND_NUM=0

    echo -e "Checking runtime version:"
    pacman -Qi --color always wine-stable &> /dev/null;
    if [ $? -ne 0 ] ; then
        echo -e "${RED}[no] Runtime version is invalid.${NORMAL}\n"
        echo -e "${YELLOW}=> Downloading runtime software....${NORMAL}"
        curl -# $REPO_ADDR/$WINE_NAME -o $DOWNLOAD_DIR/$WINE_NAME
        yes | sudo pacman -U $DOWNLOAD_DIR/$WINE_NAME;
    else
        echo -e "${GREEN}[ok] Runtime version is valid.${NORMAL}\n"
    fi;

    for((i=0;i<${#WINE_DEPS[@]};i++))
    do
        NUM=$(( i + 1 ))
        echo -ne "Checking Dependencies:${YELLOW} $(( $NUM * 100 / ${#WINE_DEPS[@]}))%${NORMAL}\033[0K\r";
        pacman -Qi --color always "${WINE_DEPS[$i]}" &> /dev/null;
        if [ $? -eq 0 ] ; then
            ((FOUND_NUM++))
        else
            ((MISSING_NUM++))
            MISSING_DEPS+=" ${WINE_DEPS[$i]}"
        fi;
    done;

    if [[ $MISSING_NUM -gt 0 ]]; then
        echo -e ""
        echo -e "${RED}[no] Some Problems Found.${NORMAL}\n"
        echo -e "Dependencies Found: \t${GREEN}${FOUND_NUM}${NORMAL}"
        echo -e "Dependencies Missing: \t${RED}${MISSING_NUM}${NORMAL}"
        echo -e "Installing Missing Dependencies:\n"
        sudo pacman -S --noconfirm $MISSING_DEPS
    else
        echo -e ""
        echo -e "${GREEN}[ok] No Problems Found.${NORMAL}\n"
        echo -e "Dependencies Found: \t${GREEN}${FOUND_NUM}${NORMAL}"
        echo -e "Dependencies Missing: \t${RED}${MISSING_NUM}${NORMAL}\n"
    fi;
}

extract() {
    archive="$1"
    
    originalsize=$(file $archive | rev | cut -d' ' -f1 | rev)
    step=100
    blocks=$(echo "$originalsize / 512 / 20 / $step" | bc)
    
    tar -xz --checkpoint=$step --totals \
    --checkpoint-action="exec='p=\$(echo "\$TAR_CHECKPOINT/$blocks" | bc -l);printf \"Extracting package: %.4f%%\r\" \$p'" \
    -f $archive
}

version() {
    printf "PiWin $LOCAL_VERSION by KOOMPI\n"
}

update() {
    
    RESULT=$(semver_compare ${SERVER_VERSION} ${LOCAL_VERSION})

    check_deps

    if [[ $RESULT -eq 0 ]]; then
        printf "${GREEN}No update available.\nYou already have the latest PiWin version installed.\n";
    fi
    
    if [[ $RESULT -lt 0 ]]; then
        printf "${RED}You version is ahead of release\n${NORMAL}Local: $LOCAL_VERSION > Sever: $SERVER_VERSION\n";
    fi
    
    if [[ $RESULT -gt 0 ]]; then
        printf "${YELLOW}Update Available\n${NORMAL}Local: $LOCAL_VERSION > Sever: $SERVER_VERSION\n";
    fi
}

list() {
    
    for((i=0;i<${#APP_LIST[@]};i++))
    do
        if [[ i -eq 0 ]]; then
            printf "${GREEN}\n"
            printf "%s \x1d %s \x1d %s \x1d %s \x1d\n" "NO" "APPLICATION" "INSTALL" "REMOVE";
            printf "${NORMAL}\n"
        fi
        printf "%d \x1d %s \x1d %s \x1d %s \x1d\n" $((i + 1)) ${APP_LIST[$i]} "piwin -i ${APP_LIST[$i]}" "piwin -r ${APP_LIST[$i]}";
    done | column -t -s$'\x1d'
    printf "\n"
    
}

install() {
    
    exist=0
    check_deps

    for((i=0;i<${#APP_LIST[@]};i++))
    do
        if [[ $1 == ${APP_LIST[$i]} ]]; then
            exist=1
            break;
        fi
    done;
    
    if [[ $exist == 0 ]]; then
        SIMILAR=$(list | grep -c $1);
        printf "\n"
        if [[ $SIMILAR -gt 0 ]]; then
            printf "${RED}\"$1\" is incorrect or unavailable for now\n";
            printf "Here are similar apps:\n${NORMAL}";
            list | grep $1
        fi
        
        if [[ $SIMILAR -eq 0 ]]; then
            echo -e "${RED}\"$1\" ${NORMAL}is incorrect or unavailable for now.";
            echo -e "Request this app at KOOMPI Telegram community at:${GREEN} \nhttps://t.me/koompi${NORMAL}";
            echo -e "Checkout all available apps below\n";
            list;
        fi
    fi

    check_pkg_exist=$(curl -I $REPO_ADDR/piwin/${1}.tar.gz 2>/dev/null | head -n 1 | cut -d$' ' -f2)

    if [[ $exist == 1 ]]; then

        if [[ $check_pkg_exist == 200 ]]; then
        
            echo -e "${GREEN}Dowloading ${1^^} ${NORMAL}";
            curl -# $REPO_ADDR/piwin/${1}.tar.gz -o $DOWNLOAD_DIR/${1}.tar.gz
            cd $DOWNLOAD_DIR
            extract ${1}.tar.gz
            cd $DOWNLOAD_DIR/${1}
            echo -e "${GREEN}Preparing to install ${1^^} ${NORMAL}";
            chmod +x $DOWNLOAD_DIR/${1}/installer.sh
            $(which bash) cd $DOWNLOAD_DIR/${1}/installer.sh

        elif [[ $check_pkg_exist == 404 ]]; then

            echo -e "${RED}[404] Package not found";
        
        else

            echo -e "${RED}[${check_pkg_exist}] Error! Something went wrong on the server side.${NORMAL}"
            echo -e "${YELLOW}Please try again in a few minutes later.${NORMAL}"
            echo -e "${GREEN}If the problem still persists please let us know at: https://t.me/koompi"

        fi;
    fi
}

remove() {
    echo removing $1
}

case "$1" in
    l | list | -l | --list)
        list
    ;;
    i | install | -i | --install)
        install $2
    ;;
    r | remove | -r | --remove)
        remove $2
    ;;
    u | update | -u | --update)
        update $2
    ;;
    v | version | -v | --version)
        version
    ;;
    *)
        echo -e "Usage: ${0} {start|stop|ssh}"
        exit 1
esac